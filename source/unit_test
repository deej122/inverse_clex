#include <iostream>
#include <vector>
#include <cstdlib>
#include <math.h>
#include "../external/jsonParser/jsonParser.hh"
#include "../h/clex.h"
#include "../h/metropolis.h"

// comment
using namespace std;

int main()
{
vector<double> calc_corr(const vector< vector<int> > & matrix);
double calc_corr_1NN(const vector< vector<int> > & matrix);
double calc_corr_2NN(const vector< vector<int> > & matrix);
double calc_corr_3NN(const vector< vector<int> > & matrix);
vector<double> calc_delta_corr(const vector< vector<int> > & matrix , const int & row, const int & col, const int & end_atom);
double calc_delta_corr_1NN(const vector< vector<int> > & matrix, const int & row, const int & col, const int & end_atom);
double calc_delta_corr_2NN(const vector< vector<int> > & matrix, const int & row, const int & col, const int & end_atom);
double calc_delta_corr_3NN(const vector< vector<int> > & matrix, const int & row, const int & col, const int & end_atom);
double dot(const vector<double> & vector1, const vector<double> & vector2);
template<class T>
void print_matrix (const vector< vector<T> > & matrix);

	//test all testable functions in clex.cpp
	jsonParser clex_test_inputs_in;
	clex_test_inputs_in.read(std::string("clex_test_inputs.json"));
	jsonParser clex_test_outputs_in;
	clex_test_outputs_in.read(std::string("clex_test_outputs_key.json"));

	//test create_ECI_vec function
	check_create_ECI_vec_function(clex_test_inputs_in, clex_test_outputs_in);

	

	//declare variables
	int num_passes;
	double temp;
	vector<int> dim;
	vector<double> ECI_vec, species;

	//read in json information from ECI_conditions.json and set variables equal to the inputs
	read_json_in(temp, dim, species, ECI_vec, num_passes);

	//outputs the conditions ot a json file
	jsonParser json_out;
	json_out["Temp"] = temp;
	json_out["Species"] = species;
	json_out["Data_by_pass"] = jsonParser::array();

	//read matrix in from json file test_matrix 
	jsonParser read_json_matrix_in;
	read_json_matrix_in.read(std::string("test_matrix.json"));
	vector< vector<int> > matrix = read_json_matrix_in["matrix"];


	// write out to a json file
	int pass_count = 0;
	write_json_out (ECI_vec, matrix, json_out, pass_count, species);

	for(pass_count=1; pass_count <= num_passes; pass_count++)
	{
		matrix=metropolis(matrix, ECI_vec, temp);
		write_json_out (ECI_vec, matrix, json_out, pass_count, species);

	}

	json_out.write(std::string("monte_carlo_calcs.json"));
	
	return 0;
}

//procedure to check the create_ECI_vec 
void check_create_ECI_vec_function(jsonParser & inputs, jsonParser & output_key)
{
	int pass_counter=0;
	for (int num_tests=0; num_tests < inputs["create_ECI_vec"].size(); num_tests++)
	{
		vector<double> test_ECI_vec = create_ECI_vec(inputs["create_ECI_vec"][num_tests][0], inputs["create_ECI_vec"][num_tests][1], inputs["create_ECI_vec"][num_tests][2]);
		if ( test_ECI_vec == output_key["create_ECI_vec"][num_tests])
		{
			pass_counter += 1;
		}
		else
		{
			cout << "Failed create_ECI_vec function on input number " << num_tests << endl;
				 << "current output is: [ " << test_ECI_vec[0] << ", " << test_ECI_vec[1] << ", " << test_ECI_vec[2] << " ]" << endl;
		}
		if (pass_counter == inputs["create_ECI_vec"].size())
		{
			cout << "Passed create_ECI_vec function!" << endl;
		}
	}

}